{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#vkpymusic--vkpymusic","title":"VKpyMusic","text":"<p>A library for interacting with music in VK.</p> <p>Provides a convenient API for authorization,  receiving audio recordings, searching for music, as well as downloading individual songs and  playlists of the user in VK.</p> <p>Classes:</p> Name Description <code>Client</code> <p>A class that stores the user agent string, client ID, and client secret.</p> <code>TokenReceiver</code> <p>A class for receiving an access token.</p> <code>TokenReceiverAsync</code> <p>A class for receiving an access token asynchronously.</p> <code>Service</code> <p>A class for interacting with VK API.</p> <p>Modules:</p> Name Description <code>models</code> <p>A module that contains all models for vkpymusic.</p> <code>utils</code> <p>A module that contains utilities for conversion and logging.</p> <code>vk_api</code> <p>A module that contains classes for requests to VK API.</p>"},{"location":"installation/","title":"Installing vkpymusic","text":"<p>Welcome to the <code>vkpymusic</code> installation guide! Follow these steps to install and set up <code>vkpymusic</code> on your computer.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing <code>vkpymusic</code>, make sure you have Python 3.6 or later installed. You can check this by running the following command in your terminal:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#installation","title":"Installation","text":"<p>You can install <code>vkpymusic</code> using pip. Run the following command in your terminal:</p> <pre><code>pip install vkpymusic\n</code></pre> <p>Or you can install it from github:</p> <pre><code>git clone www.github.com/issamansur/vkpymusic\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>To make sure that <code>vkpymusic</code> was installed correctly, you can run the following command:</p> <pre><code>vkpymusic --version\n</code></pre> <p>If the installation was successful, this command should output the version of <code>vkpymusic</code>.</p>"},{"location":"installation/#suggestions-and-issues","title":"Suggestions and issues","text":"<p>If you encounter any issues with the installation of <code>vkpymusic</code>, please create a new issue in our GitHub repository.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2023 issamansur (EDEXADE)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"vkpymusic/","title":"Vkpymusic","text":""},{"location":"vkpymusic/#vkpymusic","title":"<code>vkpymusic</code>","text":""},{"location":"vkpymusic/#vkpymusic--vkpymusic","title":"VKpyMusic","text":"<p>A library for interacting with music in VK.</p> <p>Provides a convenient API for authorization,  receiving audio recordings, searching for music, as well as downloading individual songs and  playlists of the user in VK.</p> <p>Classes:</p> Name Description <code>Client</code> <p>A class that stores the user agent string, client ID, and client secret.</p> <code>TokenReceiver</code> <p>A class for receiving an access token.</p> <code>TokenReceiverAsync</code> <p>A class for receiving an access token asynchronously.</p> <code>Service</code> <p>A class for interacting with VK API.</p> <p>Modules:</p> Name Description <code>models</code> <p>A module that contains all models for vkpymusic.</p> <code>utils</code> <p>A module that contains utilities for conversion and logging.</p> <code>vk_api</code> <p>A module that contains classes for requests to VK API.</p>"},{"location":"vkpymusic/#vkpymusic.Client","title":"<code>vkpymusic.Client(user_agent, client_id, client_secret)</code>","text":"<p>A class that stores the user agent string, client ID, and client secret.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>The user agent string.</p> <code>client_id</code> <code>str</code> <p>The client ID.</p> <code>client_secret</code> <code>str</code> <p>The client secret.</p> <p>Initializes a Client object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent string.</p> required <code>client_id</code> <code>str</code> <p>The client ID.</p> required <code>client_secret</code> <code>str</code> <p>The client secret.</p> required"},{"location":"vkpymusic/#vkpymusic.TokenReceiver","title":"<code>vkpymusic.TokenReceiver(login, password, client='Kate', logger=create_logger(__name__))</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. The TokenReceiver class provides methods for handling captcha, 2-factor authentication, and various error scenarios.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <code>_logger</code> <code>Logger</code> <p>The logger.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; receiver = TokenReceiver(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if receiver.auth():\n...    receiver.get_token()\n...    receiver.save_to_config()\n</code></pre> <p>Initialize TokenReceiver.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>Login to VK.</p> required <code>password</code> <code>str</code> <p>Password to VK.</p> required <code>client</code> <code>str</code> <p>Client to VK (default value = \"Kate\").</p> <code>'Kate'</code> <code>logger</code> <code>Logger</code> <p>Logger (default value = my logger).</p> <code>create_logger(__name__)</code>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.request_auth","title":"<code>request_auth(code=None, captcha=None)</code>","text":"<p>Request auth from VK.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Optional[str]</code> <p>Code from VK/SMS (default value = None).</p> <code>None</code> <code>captcha</code> <code>Optional[Tuple[str, str]]</code> <p>Captcha (default value = None).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.request_code","title":"<code>request_code(sid)</code>","text":"<p>Request code from VK.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>Union[str, int]</code> <p>Sid from VK.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.auth","title":"<code>auth(on_captcha=on_captcha_handler, on_2fa=on_2fa_handler, on_invalid_client=on_invalid_client_handler, on_critical_error=on_critical_error_handler)</code>","text":"<p>Performs authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>Handler to captcha. Get url image. Return key.</p> <code>on_captcha_handler</code> <code>on_2fa</code> <code>Callable[[], str]</code> <p>Handler to 2-factor auth. Return captcha.</p> <code>on_2fa_handler</code> <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>Handler to invalid client.</p> <code>on_invalid_client_handler</code> <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>Handler to critical error. Get response.</p> <code>on_critical_error_handler</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was successful).</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was successful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"vkpymusic/#vkpymusic.TokenReceiver.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync","title":"<code>vkpymusic.TokenReceiverAsync(login, password, client='Kate', logger=create_logger(__name__))</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. WARNING!!! The TokenReceiverAsync class DOESN'T provide methods for handling captcha, 2-factor authentication, and various error scenarios. You need to implement them yourself using the appropriate handlers.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <code>_logger</code> <code>Logger</code> <p>The logger.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from vkpymusic import TokenReceiverAsync\n&gt;&gt;&gt;\n&gt;&gt;&gt; receiver = TokenReceiverAsync(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if asyncio.run(receiver.auth()):\n...     receiver.get_token()\n...     receiver.save_to_config()\n</code></pre> <p>Initialize TokenReceiver.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>Login to VK.</p> required <code>password</code> <code>str</code> <p>Password to VK.</p> required <code>client</code> <code>str</code> <p>Client to VK (default value = \"Kate\").</p> <code>'Kate'</code> <code>logger</code> <code>Logger</code> <p>Logger (default value = my logger).</p> <code>create_logger(__name__)</code>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.request_auth","title":"<code>request_auth(code=None, captcha=None)</code>  <code>async</code>","text":"<p>Request auth from VK.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Optional[str]</code> <p>Code from VK/SMS (default value = None).</p> <code>None</code> <code>captcha</code> <code>Optional[Tuple[str, str]]</code> <p>Captcha (default value = None).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.request_code","title":"<code>request_code(sid)</code>  <code>async</code>","text":"<p>Request code from VK.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>Union[str, int]</code> <p>Sid from VK.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.auth","title":"<code>auth(on_captcha, on_2fa, on_invalid_client, on_critical_error)</code>  <code>async</code>","text":"<p>Performs ASYNC authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>ASYNC handler to captcha. Get url image. Return key.</p> required <code>on_2fa</code> <code>Callable[[], str]</code> <p>ASYNC handler to 2-factor auth. Return captcha.</p> required <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>ASYNC handler to invalid client.</p> required <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>ASYNC handler to crit error. Get response.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was successful).</p>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was succesful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"vkpymusic/#vkpymusic.TokenReceiverAsync.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"vkpymusic/#vkpymusic.Service","title":"<code>vkpymusic.Service(user_agent, token)</code>","text":"<p>A class for working with VK API.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>User agent string.</p> <code>__token</code> <code>str</code> <p>Token for VK API.</p> <code>logger</code> <code>Logger</code> <p>The logger for class.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; service = Service.parse_config()\n&gt;&gt;&gt; songs = service.search_songs_by_text(\"Imagine Dragons\")\n&gt;&gt;&gt; for song in songs:\n...     Service.save_music(song)\n&gt;&gt;&gt; // or\n&gt;&gt;&gt; songs = await service.search_songs_by_text_async(\"Imagine Dragons\")\n&gt;&gt;&gt; for song in songs:\n...     await Service.save_music_async(song)\n</code></pre> <p>Initializes a Service object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>User agent string.</p> required <code>token</code> <code>str</code> <p>Token for VK API.</p> required"},{"location":"vkpymusic/#vkpymusic.Service.set_logger","title":"<code>set_logger(logger)</code>  <code>classmethod</code>","text":"<p>Set logger for class.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger.</p> required"},{"location":"vkpymusic/#vkpymusic.Service.parse_config","title":"<code>parse_config(filename='config_vk.ini')</code>  <code>classmethod</code>","text":"<p>Create an instance of Service from config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"vkpymusic/#vkpymusic.Service.del_config","title":"<code>del_config(filename='config_vk.ini')</code>","text":"<p>Delete config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"vkpymusic/#vkpymusic.Service.fill_user_agent_and_token","title":"<code>fill_user_agent_and_token(request)</code>","text":"<p>Fill user-agent and token in request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>Request to fill.</p> required"},{"location":"vkpymusic/#vkpymusic.Service.validate_and_parse_response","title":"<code>validate_and_parse_response(api_response)</code>  <code>classmethod</code>","text":"<p>Validate and parse response from VK API.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>Response from VK API.</p> required"},{"location":"vkpymusic/#vkpymusic.Service.make_request","title":"<code>make_request(request)</code>  <code>classmethod</code>","text":"<p>Makes a synchronous request to the VK API.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>The request to make.</p> required <p>Returns:</p> Name Type Description <code>VkApiResponse</code> <code>VkApiResponse</code> <p>The response from the VK API.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response status code is not 200.</p>"},{"location":"vkpymusic/#vkpymusic.Service.make_request_async","title":"<code>make_request_async(request)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Makes an asynchronous request to the VK API.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>The request to make.</p> required <p>Returns:</p> Name Type Description <code>VkApiResponse</code> <code>VkApiResponse</code> <p>The response from the VK API.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response status code is not 200.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_user_info","title":"<code>get_user_info()</code>","text":"<p>Get user info by token (sync).</p> <p>Returns:</p> Name Type Description <code>UserInfo</code> <code>UserInfo</code> <p>Instance of 'UserInfo'.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_user_info_async","title":"<code>get_user_info_async()</code>  <code>async</code>","text":"<p>Get user info by token (async).</p> <p>Returns:</p> Name Type Description <code>UserInfo</code> <code>UserInfo</code> <p>Instance of 'UserInfo'.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.check_token","title":"<code>check_token(token)</code>  <code>classmethod</code>","text":"<p>Check token for VK API (sync).</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token for VK API.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"vkpymusic/#vkpymusic.Service.check_token_async","title":"<code>check_token_async(token)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Check token for VK API (async).</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token for VK API.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"vkpymusic/#vkpymusic.Service.is_token_valid","title":"<code>is_token_valid()</code>","text":"<p>Check token for VK API (sync).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"vkpymusic/#vkpymusic.Service.is_token_valid_async","title":"<code>is_token_valid_async()</code>  <code>async</code>","text":"<p>Check token for VK API (async).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_count_by_user_id","title":"<code>get_count_by_user_id(user_id)</code>","text":"<p>Get count of all user's songs (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_count_by_user_id_async","title":"<code>get_count_by_user_id_async(user_id)</code>  <code>async</code>","text":"<p>Get count of all user's songs (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_userid","title":"<code>get_songs_by_userid(user_id, count=100, offset=0)</code>","text":"<p>Search songs by owner/user id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_userid_async","title":"<code>get_songs_by_userid_async(user_id, count=100, offset=0)</code>  <code>async</code>","text":"<p>Search songs by owner/user id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_playlist_id","title":"<code>get_songs_by_playlist_id(user_id, playlist_id, access_key, count=100, offset=0)</code>","text":"<p>Get songs by playlist id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_playlist_id_async","title":"<code>get_songs_by_playlist_id_async(user_id, playlist_id, access_key, count=100, offset=0)</code>  <code>async</code>","text":"<p>Get songs by playlist id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_playlist","title":"<code>get_songs_by_playlist(playlist, count=10, offset=0)</code>","text":"<p>Get songs by instance of 'Playlist' (sync).</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_songs_by_playlist_async","title":"<code>get_songs_by_playlist_async(playlist, count=10, offset=0)</code>  <code>async</code>","text":"<p>Get songs by instance of 'Playlist' (async).</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_songs_by_text","title":"<code>search_songs_by_text(text, count=3, offset=0)</code>","text":"<p>Search songs by text/query (sync).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_songs_by_text_async","title":"<code>search_songs_by_text_async(text, count=3, offset=0)</code>  <code>async</code>","text":"<p>Search songs by text/query (async).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_playlists_by_userid","title":"<code>get_playlists_by_userid(user_id, count=5, offset=0)</code>","text":"<p>Get playlist by owner/user id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str or int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_playlists_by_userid_async","title":"<code>get_playlists_by_userid_async(user_id, count=5, offset=0)</code>  <code>async</code>","text":"<p>Get playlist by owner/user id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str or int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_playlists_by_text","title":"<code>search_playlists_by_text(text, count=5, offset=0)</code>","text":"<p>Search playlists by text/query (sync). Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_playlists_by_text_async","title":"<code>search_playlists_by_text_async(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search playlists by text/query (async). Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_albums_by_text","title":"<code>search_albums_by_text(text, count=5, offset=0)</code>","text":"<p>Search albums by text/query (sync). Album - artists' album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.search_albums_by_text_async","title":"<code>search_albums_by_text_async(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search albums by text/query (async). Album - artists' album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_popular","title":"<code>get_popular(count=50, offset=0)</code>","text":"<p>Get popular songs (sync). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 500).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_popular_async","title":"<code>get_popular_async(count=50, offset=0)</code>  <code>async</code>","text":"<p>Get popular songs (async). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 500).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_recommendations","title":"<code>get_recommendations(user_id=None, song_id=None, count=50, offset=0)</code>","text":"<p>Get recommendations by user id or song id (sync). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> <code>None</code> <code>song_id</code> <code>int</code> <p>VK song id.</p> <code>None</code> <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 300).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.get_recommendations_async","title":"<code>get_recommendations_async(user_id=None, song_id=None, count=50, offset=0)</code>  <code>async</code>","text":"<p>Get recommendations by user id or song id (async). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> <code>None</code> <code>song_id</code> <code>int</code> <p>VK song id.</p> <code>None</code> <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 300).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.save_music","title":"<code>save_music(song, overwrite=False)</code>  <code>classmethod</code>","text":"<p>Save song (sync) to '{workDirectory}/Music/{song name}.mp3'. If you wanna another behavior, you can override this method or use your own method for saving music.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite file if it exists. By default doesn't overwrite.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>relative path of downloaded music or None if error.</p>"},{"location":"vkpymusic/#vkpymusic.Service.save_music_async","title":"<code>save_music_async(song, overwrite=False)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Save song (async) to '{workDirectory}/Music/{song name}.mp3'. If you wanna another behavior, you can override this method or use your own method for saving music.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite file if it exists. By default doesn't overwrite.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>relative path of downloaded music or None if error.</p>"},{"location":"api/client/","title":"Client","text":""},{"location":"api/client/#vkpymusic.Client","title":"<code>vkpymusic.Client</code>","text":"<p>A class that stores the user agent string, client ID, and client secret.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>The user agent string.</p> <code>client_id</code> <code>str</code> <p>The client ID.</p> <code>client_secret</code> <code>str</code> <p>The client secret.</p>"},{"location":"api/client/#vkpymusic.Client.__init__","title":"<code>__init__(user_agent, client_id, client_secret)</code>","text":"<p>Initializes a Client object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent string.</p> required <code>client_id</code> <code>str</code> <p>The client ID.</p> required <code>client_secret</code> <code>str</code> <p>The client secret.</p> required"},{"location":"api/models/","title":".models","text":""},{"location":"api/models/#vkpymusic.models","title":"<code>vkpymusic.models</code>","text":"<p>This module contains all models for vkpymusic.</p> <p>Classes:</p> Name Description <code>Song</code> <p>A class that represents a song.</p> <code>Playlist</code> <p>A class that represents a playlist.</p> <code>UserInfo</code> <p>A class that represents a main user's info.</p>"},{"location":"api/models/#vkpymusic.models.Song","title":"<code>Song</code>","text":"<p>A class that represents a song.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the song.</p> <code>artist</code> <code>str</code> <p>The artist of the song.</p> <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> <code>track_id</code> <code>str</code> <p>The ID of the song.</p> <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> <code>url</code> <code>str</code> <p>The URL of the song.</p>"},{"location":"api/models/#vkpymusic.models.Song.__init__","title":"<code>__init__(title, artist, duration, track_id, owner_id, url='')</code>","text":"<p>Initializes a Song object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the song.</p> required <code>artist</code> <code>str</code> <p>The artist of the song.</p> required <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> required <code>track_id</code> <code>str</code> <p>The ID of the song.</p> required <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> required <code>url</code> <code>str</code> <p>The URL of the song.</p> <code>''</code>"},{"location":"api/models/#vkpymusic.models.Song.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the song to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The song as a dictionary.</p>"},{"location":"api/models/#vkpymusic.models.Song.to_safe","title":"<code>to_safe()</code>","text":"<p>Removes all non-alphanumeric characters from the song's title and artist.</p>"},{"location":"api/models/#vkpymusic.models.Song.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Creates a Song object from a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Song</code> <code>Song</code> <p>A Song object.</p>"},{"location":"api/models/#vkpymusic.models.Playlist","title":"<code>Playlist</code>","text":"<p>A class that represents a playlist.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the playlist.</p> <code>description</code> <code>str</code> <p>The description of the playlist.</p> <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p>"},{"location":"api/models/#vkpymusic.models.Playlist.__init__","title":"<code>__init__(title, description, photo, count, followers, owner_id, playlist_id, access_key)</code>","text":"<p>Initializes a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the playlist.</p> required <code>description</code> <code>str</code> <p>The description of the playlist.</p> required <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> required <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> required <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> required <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> required <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p> required"},{"location":"api/models/#vkpymusic.models.Playlist.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the playlist to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The playlist as a dictionary.</p>"},{"location":"api/models/#vkpymusic.models.Playlist.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Playlist</code> <code>Playlist</code> <p>The Playlist object.</p>"},{"location":"api/models/#vkpymusic.models.UserInfo","title":"<code>UserInfo</code>","text":"<p>A class that represents a user.</p> <p>Attributes:</p> Name Type Description <code>userid</code> <code>int</code> <p>The ID of the user.</p> <code>first_name</code> <code>str</code> <p>The first name of the user.</p> <code>last_name</code> <code>str</code> <p>The last name of the user.</p> <code>photo</code> <code>str</code> <p>The URL of the user's photo.</p> <code>phone</code> <code>str</code> <p>The phone number of the user.</p>"},{"location":"api/models/#vkpymusic.models.UserInfo.__init__","title":"<code>__init__(userid, first_name, last_name, photo='', phone='')</code>","text":"<p>Initializes a UserInfo object.</p> <p>Args: userid (int): The ID of the user. first_name (str): The first name of the user. last_name (str): The last name of the user. photo (str): The URL of the user's photo. phone (str): The phone number of the user.</p>"},{"location":"api/models/#vkpymusic.models.UserInfo.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the user to a dictionary.</p>"},{"location":"api/models/#vkpymusic.models.UserInfo.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a UserInfo object.</p>"},{"location":"api/service/","title":"Service","text":""},{"location":"api/service/#vkpymusic.Service","title":"<code>vkpymusic.Service</code>","text":"<p>A class for working with VK API.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>User agent string.</p> <code>__token</code> <code>str</code> <p>Token for VK API.</p> <code>logger</code> <code>Logger</code> <p>The logger for class.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; service = Service.parse_config()\n&gt;&gt;&gt; songs = service.search_songs_by_text(\"Imagine Dragons\")\n&gt;&gt;&gt; for song in songs:\n...     Service.save_music(song)\n&gt;&gt;&gt; // or\n&gt;&gt;&gt; songs = await service.search_songs_by_text_async(\"Imagine Dragons\")\n&gt;&gt;&gt; for song in songs:\n...     await Service.save_music_async(song)\n</code></pre>"},{"location":"api/service/#vkpymusic.Service-functions","title":"Functions","text":""},{"location":"api/service/#vkpymusic.Service.__init__","title":"<code>__init__(user_agent, token)</code>","text":"<p>Initializes a Service object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>User agent string.</p> required <code>token</code> <code>str</code> <p>Token for VK API.</p> required"},{"location":"api/service/#vkpymusic.Service.set_logger","title":"<code>set_logger(logger)</code>  <code>classmethod</code>","text":"<p>Set logger for class.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger.</p> required"},{"location":"api/service/#vkpymusic.Service.parse_config","title":"<code>parse_config(filename='config_vk.ini')</code>  <code>classmethod</code>","text":"<p>Create an instance of Service from config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/service/#vkpymusic.Service.del_config","title":"<code>del_config(filename='config_vk.ini')</code>","text":"<p>Delete config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/service/#vkpymusic.Service.fill_user_agent_and_token","title":"<code>fill_user_agent_and_token(request)</code>","text":"<p>Fill user-agent and token in request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>Request to fill.</p> required"},{"location":"api/service/#vkpymusic.Service.validate_and_parse_response","title":"<code>validate_and_parse_response(api_response)</code>  <code>classmethod</code>","text":"<p>Validate and parse response from VK API.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>Response from VK API.</p> required"},{"location":"api/service/#vkpymusic.Service.make_request","title":"<code>make_request(request)</code>  <code>classmethod</code>","text":"<p>Makes a synchronous request to the VK API.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>The request to make.</p> required <p>Returns:</p> Name Type Description <code>VkApiResponse</code> <code>VkApiResponse</code> <p>The response from the VK API.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response status code is not 200.</p>"},{"location":"api/service/#vkpymusic.Service.make_request_async","title":"<code>make_request_async(request)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Makes an asynchronous request to the VK API.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>VkApiRequest</code> <p>The request to make.</p> required <p>Returns:</p> Name Type Description <code>VkApiResponse</code> <code>VkApiResponse</code> <p>The response from the VK API.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response status code is not 200.</p>"},{"location":"api/service/#vkpymusic.Service.get_user_info","title":"<code>get_user_info()</code>","text":"<p>Get user info by token (sync).</p> <p>Returns:</p> Name Type Description <code>UserInfo</code> <code>UserInfo</code> <p>Instance of 'UserInfo'.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_user_info_async","title":"<code>get_user_info_async()</code>  <code>async</code>","text":"<p>Get user info by token (async).</p> <p>Returns:</p> Name Type Description <code>UserInfo</code> <code>UserInfo</code> <p>Instance of 'UserInfo'.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.check_token","title":"<code>check_token(token)</code>  <code>classmethod</code>","text":"<p>Check token for VK API (sync).</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token for VK API.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.check_token_async","title":"<code>check_token_async(token)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Check token for VK API (async).</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token for VK API.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.is_token_valid","title":"<code>is_token_valid()</code>","text":"<p>Check token for VK API (sync).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.is_token_valid_async","title":"<code>is_token_valid_async()</code>  <code>async</code>","text":"<p>Check token for VK API (async).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.get_count_by_user_id","title":"<code>get_count_by_user_id(user_id)</code>","text":"<p>Get count of all user's songs (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_count_by_user_id_async","title":"<code>get_count_by_user_id_async(user_id)</code>  <code>async</code>","text":"<p>Get count of all user's songs (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_userid","title":"<code>get_songs_by_userid(user_id, count=100, offset=0)</code>","text":"<p>Search songs by owner/user id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_userid_async","title":"<code>get_songs_by_userid_async(user_id, count=100, offset=0)</code>  <code>async</code>","text":"<p>Search songs by owner/user id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist_id","title":"<code>get_songs_by_playlist_id(user_id, playlist_id, access_key, count=100, offset=0)</code>","text":"<p>Get songs by playlist id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist_id_async","title":"<code>get_songs_by_playlist_id_async(user_id, playlist_id, access_key, count=100, offset=0)</code>  <code>async</code>","text":"<p>Get songs by playlist id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist","title":"<code>get_songs_by_playlist(playlist, count=10, offset=0)</code>","text":"<p>Get songs by instance of 'Playlist' (sync).</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist_async","title":"<code>get_songs_by_playlist_async(playlist, count=10, offset=0)</code>  <code>async</code>","text":"<p>Get songs by instance of 'Playlist' (async).</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_songs_by_text","title":"<code>search_songs_by_text(text, count=3, offset=0)</code>","text":"<p>Search songs by text/query (sync).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_songs_by_text_async","title":"<code>search_songs_by_text_async(text, count=3, offset=0)</code>  <code>async</code>","text":"<p>Search songs by text/query (async).</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_playlists_by_userid","title":"<code>get_playlists_by_userid(user_id, count=5, offset=0)</code>","text":"<p>Get playlist by owner/user id (sync).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str or int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_playlists_by_userid_async","title":"<code>get_playlists_by_userid_async(user_id, count=5, offset=0)</code>  <code>async</code>","text":"<p>Get playlist by owner/user id (async).</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str or int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_playlists_by_text","title":"<code>search_playlists_by_text(text, count=5, offset=0)</code>","text":"<p>Search playlists by text/query (sync). Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_playlists_by_text_async","title":"<code>search_playlists_by_text_async(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search playlists by text/query (async). Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_albums_by_text","title":"<code>search_albums_by_text(text, count=5, offset=0)</code>","text":"<p>Search albums by text/query (sync). Album - artists' album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.search_albums_by_text_async","title":"<code>search_albums_by_text_async(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search albums by text/query (async). Album - artists' album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_popular","title":"<code>get_popular(count=50, offset=0)</code>","text":"<p>Get popular songs (sync). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 500).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_popular_async","title":"<code>get_popular_async(count=50, offset=0)</code>  <code>async</code>","text":"<p>Get popular songs (async). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 500).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_recommendations","title":"<code>get_recommendations(user_id=None, song_id=None, count=50, offset=0)</code>","text":"<p>Get recommendations by user id or song id (sync). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> <code>None</code> <code>song_id</code> <code>int</code> <p>VK song id.</p> <code>None</code> <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 300).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.get_recommendations_async","title":"<code>get_recommendations_async(user_id=None, song_id=None, count=50, offset=0)</code>  <code>async</code>","text":"<p>Get recommendations by user id or song id (async). (Be careful, it always returns less than count)</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> <code>None</code> <code>song_id</code> <code>int</code> <p>VK song id.</p> <code>None</code> <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default = 50, max = 300).</p> <code>50</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p> <p>Raises:</p> Type Description <code>VkApiException</code> <p>If the response contains an error.</p>"},{"location":"api/service/#vkpymusic.Service.save_music","title":"<code>save_music(song, overwrite=False)</code>  <code>classmethod</code>","text":"<p>Save song (sync) to '{workDirectory}/Music/{song name}.mp3'. If you wanna another behavior, you can override this method or use your own method for saving music.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite file if it exists. By default doesn't overwrite.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>relative path of downloaded music or None if error.</p>"},{"location":"api/service/#vkpymusic.Service.save_music_async","title":"<code>save_music_async(song, overwrite=False)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Save song (async) to '{workDirectory}/Music/{song name}.mp3'. If you wanna another behavior, you can override this method or use your own method for saving music.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite file if it exists. By default doesn't overwrite.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>relative path of downloaded music or None if error.</p>"},{"location":"api/tokenreceiver/","title":"TokenReceiver","text":""},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver","title":"<code>vkpymusic.TokenReceiver</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. The TokenReceiver class provides methods for handling captcha, 2-factor authentication, and various error scenarios.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <code>_logger</code> <code>Logger</code> <p>The logger.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; receiver = TokenReceiver(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if receiver.auth():\n...    receiver.get_token()\n...    receiver.save_to_config()\n</code></pre>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver-functions","title":"Functions","text":""},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.__init__","title":"<code>__init__(login, password, client='Kate', logger=create_logger(__name__))</code>","text":"<p>Initialize TokenReceiver.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>Login to VK.</p> required <code>password</code> <code>str</code> <p>Password to VK.</p> required <code>client</code> <code>str</code> <p>Client to VK (default value = \"Kate\").</p> <code>'Kate'</code> <code>logger</code> <code>Logger</code> <p>Logger (default value = my logger).</p> <code>create_logger(__name__)</code>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.request_auth","title":"<code>request_auth(code=None, captcha=None)</code>","text":"<p>Request auth from VK.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Optional[str]</code> <p>Code from VK/SMS (default value = None).</p> <code>None</code> <code>captcha</code> <code>Optional[Tuple[str, str]]</code> <p>Captcha (default value = None).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.request_code","title":"<code>request_code(sid)</code>","text":"<p>Request code from VK.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>Union[str, int]</code> <p>Sid from VK.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.auth","title":"<code>auth(on_captcha=on_captcha_handler, on_2fa=on_2fa_handler, on_invalid_client=on_invalid_client_handler, on_critical_error=on_critical_error_handler)</code>","text":"<p>Performs authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>Handler to captcha. Get url image. Return key.</p> <code>on_captcha_handler</code> <code>on_2fa</code> <code>Callable[[], str]</code> <p>Handler to 2-factor auth. Return captcha.</p> <code>on_2fa_handler</code> <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>Handler to invalid client.</p> <code>on_invalid_client_handler</code> <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>Handler to critical error. Get response.</p> <code>on_critical_error_handler</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was successful).</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was successful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"api/tokenreceiverasync/","title":"TokenReceiverAsync","text":""},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync","title":"<code>vkpymusic.TokenReceiverAsync</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. WARNING!!! The TokenReceiverAsync class DOESN'T provide methods for handling captcha, 2-factor authentication, and various error scenarios. You need to implement them yourself using the appropriate handlers.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <code>_logger</code> <code>Logger</code> <p>The logger.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from vkpymusic import TokenReceiverAsync\n&gt;&gt;&gt;\n&gt;&gt;&gt; receiver = TokenReceiverAsync(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if asyncio.run(receiver.auth()):\n...     receiver.get_token()\n...     receiver.save_to_config()\n</code></pre>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync-functions","title":"Functions","text":""},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.__init__","title":"<code>__init__(login, password, client='Kate', logger=create_logger(__name__))</code>","text":"<p>Initialize TokenReceiver.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>Login to VK.</p> required <code>password</code> <code>str</code> <p>Password to VK.</p> required <code>client</code> <code>str</code> <p>Client to VK (default value = \"Kate\").</p> <code>'Kate'</code> <code>logger</code> <code>Logger</code> <p>Logger (default value = my logger).</p> <code>create_logger(__name__)</code>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.request_auth","title":"<code>request_auth(code=None, captcha=None)</code>  <code>async</code>","text":"<p>Request auth from VK.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>Optional[str]</code> <p>Code from VK/SMS (default value = None).</p> <code>None</code> <code>captcha</code> <code>Optional[Tuple[str, str]]</code> <p>Captcha (default value = None).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.request_code","title":"<code>request_code(sid)</code>  <code>async</code>","text":"<p>Request code from VK.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>Union[str, int]</code> <p>Sid from VK.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Response from VK.</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.auth","title":"<code>auth(on_captcha, on_2fa, on_invalid_client, on_critical_error)</code>  <code>async</code>","text":"<p>Performs ASYNC authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>ASYNC handler to captcha. Get url image. Return key.</p> required <code>on_2fa</code> <code>Callable[[], str]</code> <p>ASYNC handler to 2-factor auth. Return captcha.</p> required <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>ASYNC handler to invalid client.</p> required <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>ASYNC handler to crit error. Get response.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was successful).</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was succesful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"api/utils/","title":".utils","text":""},{"location":"api/utils/#vkpymusic.utils","title":"<code>vkpymusic.utils</code>","text":"<p>This module contains utilities for conversion and logging.</p> <p>Classes:</p> Name Description <code>Converter</code> <p>A class for performing various conversion operations.</p> <code>get_logger</code> <p>A function for getting or creating a logger.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter","title":"<code>Converter</code>","text":"<p>A class that converts a response from VK to a list of songs or playlists.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_songs","title":"<code>response_to_songs(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a list of songs.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>The response object from VK.</p> required <p>Returns:</p> Type Description <code>List[Song]</code> <p>List[Song]: A list of songs converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_playlists","title":"<code>response_to_playlists(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a list of playlists.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>The response object from VK.</p> required <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>List[Playlist]: A list of playlists converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_userinfo","title":"<code>response_to_userinfo(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a UserInfo.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>The response object from VK.</p> required <p>Returns:</p> Name Type Description <code>UserInfo</code> <code>UserInfo</code> <p>A UserInfo converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_popular","title":"<code>response_to_popular(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a list of POPULAR songs.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>VkApiResponse</code> <p>The response object from VK.</p> required <p>Returns:</p> Type Description <code>List[Song]</code> <p>List[Song]: A list of songs converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.create_logger","title":"<code>create_logger(name, console=True, file=True)</code>","text":"<p>Returns a logger instance with configured handlers.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>console</code> <code>bool</code> <p>Whether to enable debug messages in the console.</p> <code>True</code> <code>file</code> <code>bool</code> <p>Whether to enable debug messages in the log file.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>logger</code> <code>Logger</code> <p>A logger instance with configured handlers.</p>"},{"location":"api/vk_api/","title":".vk_api","text":""},{"location":"api/vk_api/#vkpymusic.vk_api","title":"<code>vkpymusic.vk_api</code>","text":"<p>This module contains different classes, using for requests to VK API.</p> <p>Classes:</p> Name Description <code>VkApiRequest</code> <p>A class that represents a request.</p> <code>VkApiRequestBuilder</code> <p>A class that builds requests.</p> <code>VkApiResponse</code> <p>A class that represents a response.</p> <code>VkApiException</code> <p>A class that represents an error.</p> Constants <p>BASE_URL: A constant that stores the base URL for VK API. DEFAULT_PARAMS: A constant that stores the default parameters for VK API.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequest","title":"<code>VkApiRequest</code>","text":"<p>A class that represents a request to VK API.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>The HTTP method.</p> <code>url</code> <code>str</code> <p>The URL.</p> <code>headers</code> <code>dict</code> <p>The headers.</p> <code>params</code> <code>dict</code> <p>The parameters.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequest.__init__","title":"<code>__init__(method, url, headers=None, params=None)</code>","text":"<p>Initializes a VkApiRequest object.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method.</p> required <code>url</code> <code>str</code> <p>The URL.</p> required <code>headers</code> <code>dict</code> <p>The headers. (default None)</p> <code>None</code> <code>params</code> <code>dict</code> <p>The parameters. (default None)</p> <code>None</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder","title":"<code>VkApiRequestBuilder</code>","text":"<p>A class for building requests to VK API.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_from_base_request","title":"<code>build_from_base_request(method, url, params)</code>  <code>staticmethod</code>","text":"<p>Builds a request from a base request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method.</p> required <code>url</code> <code>str</code> <p>The URL.</p> required <code>params</code> <code>dict</code> <p>The parameters.</p> required"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_profile_info","title":"<code>build_req_get_profile_info()</code>  <code>classmethod</code>","text":"<p>Builds a request to get profile information.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_count","title":"<code>build_req_get_count(userid)</code>  <code>classmethod</code>","text":"<p>Builds a request to get the number of user's audio.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get","title":"<code>build_req_get(userid, count=100, offset=0, playlist_id=None, access_key=None)</code>  <code>classmethod</code>","text":"<p>Builds a request to get user's audio.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code> <code>playlist_id</code> <code>int</code> <p>The playlist ID. (default None)</p> <code>None</code> <code>access_key</code> <code>str</code> <p>The access key. (default None)</p> <code>None</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search","title":"<code>build_req_search(query, count=100, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for audio by query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query.</p> required <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_playlists","title":"<code>build_req_get_playlists(userid, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get user's playlists.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required <code>count</code> <code>int</code> <p>The number of playlists. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search_playlists","title":"<code>build_req_search_playlists(text, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for playlists by text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text.</p> required <code>count</code> <code>int</code> <p>The number of playlists. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search_albums","title":"<code>build_req_search_albums(text, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for albums by text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text.</p> required <code>count</code> <code>int</code> <p>The number of albums. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_popular","title":"<code>build_req_get_popular(count=500, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get popular audio.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of audio recordings. (default 500)</p> <code>500</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_recommendations","title":"<code>build_req_get_recommendations(user_id=None, song_id=None, count=100, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get audio recommendations.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The user ID for which recommendations are being received. (default None)</p> <code>None</code> <code>song_id</code> <code>int</code> <p>The song ID for which recommendations are being received. (default None)</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiResponse","title":"<code>VkApiResponse</code>  <code>dataclass</code>","text":"<p>A class that represents a response from VK API.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Any</code> <p>The data.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiException","title":"<code>VkApiException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A class that represents an exception that occurs when interacting with the VK API.</p> <p>Attributes:</p> Name Type Description <code>error_code</code> <code>int</code> <p>The error code.</p> <code>error_msg</code> <code>str</code> <p>The error message.</p> <code>details</code> <code>dict</code> <p>Additional error details.</p>"},{"location":"api/vk_api/#vkpymusic.vk_api.VkApiException.__init__","title":"<code>__init__(error_code, error_msg, details)</code>","text":"<p>Initializes a VkApiException object.</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code>int</code> <p>The error code.</p> required <code>error_msg</code> <code>str</code> <p>The error message.</p> required <code>details</code> <code>dict</code> <p>Additional error details.</p> required"},{"location":"api/models/playlist/","title":"Playlist","text":""},{"location":"api/models/playlist/#vkpymusic.models.Playlist","title":"<code>vkpymusic.models.Playlist</code>","text":"<p>A class that represents a playlist.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the playlist.</p> <code>description</code> <code>str</code> <p>The description of the playlist.</p> <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p>"},{"location":"api/models/playlist/#vkpymusic.models.Playlist-functions","title":"Functions","text":""},{"location":"api/models/playlist/#vkpymusic.models.Playlist.__init__","title":"<code>__init__(title, description, photo, count, followers, owner_id, playlist_id, access_key)</code>","text":"<p>Initializes a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the playlist.</p> required <code>description</code> <code>str</code> <p>The description of the playlist.</p> required <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> required <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> required <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> required <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> required <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p> required"},{"location":"api/models/playlist/#vkpymusic.models.Playlist.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the playlist to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The playlist as a dictionary.</p>"},{"location":"api/models/playlist/#vkpymusic.models.Playlist.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Playlist</code> <code>Playlist</code> <p>The Playlist object.</p>"},{"location":"api/models/song/","title":"Song","text":""},{"location":"api/models/song/#vkpymusic.models.Song","title":"<code>vkpymusic.models.Song</code>","text":"<p>A class that represents a song.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the song.</p> <code>artist</code> <code>str</code> <p>The artist of the song.</p> <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> <code>track_id</code> <code>str</code> <p>The ID of the song.</p> <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> <code>url</code> <code>str</code> <p>The URL of the song.</p>"},{"location":"api/models/song/#vkpymusic.models.Song-functions","title":"Functions","text":""},{"location":"api/models/song/#vkpymusic.models.Song.__init__","title":"<code>__init__(title, artist, duration, track_id, owner_id, url='')</code>","text":"<p>Initializes a Song object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the song.</p> required <code>artist</code> <code>str</code> <p>The artist of the song.</p> required <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> required <code>track_id</code> <code>str</code> <p>The ID of the song.</p> required <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> required <code>url</code> <code>str</code> <p>The URL of the song.</p> <code>''</code>"},{"location":"api/models/song/#vkpymusic.models.Song.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the song to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The song as a dictionary.</p>"},{"location":"api/models/song/#vkpymusic.models.Song.to_safe","title":"<code>to_safe()</code>","text":"<p>Removes all non-alphanumeric characters from the song's title and artist.</p>"},{"location":"api/models/song/#vkpymusic.models.Song.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Creates a Song object from a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Song</code> <code>Song</code> <p>A Song object.</p>"},{"location":"api/models/userinfo/","title":"Userinfo","text":""},{"location":"api/models/userinfo/#vkpymusic.models.UserInfo","title":"<code>vkpymusic.models.UserInfo</code>","text":"<p>A class that represents a user.</p> <p>Attributes:</p> Name Type Description <code>userid</code> <code>int</code> <p>The ID of the user.</p> <code>first_name</code> <code>str</code> <p>The first name of the user.</p> <code>last_name</code> <code>str</code> <p>The last name of the user.</p> <code>photo</code> <code>str</code> <p>The URL of the user's photo.</p> <code>phone</code> <code>str</code> <p>The phone number of the user.</p>"},{"location":"api/models/userinfo/#vkpymusic.models.UserInfo-functions","title":"Functions","text":""},{"location":"api/models/userinfo/#vkpymusic.models.UserInfo.__init__","title":"<code>__init__(userid, first_name, last_name, photo='', phone='')</code>","text":"<p>Initializes a UserInfo object.</p> <p>Args: userid (int): The ID of the user. first_name (str): The first name of the user. last_name (str): The last name of the user. photo (str): The URL of the user's photo. phone (str): The phone number of the user.</p>"},{"location":"api/models/userinfo/#vkpymusic.models.UserInfo.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the user to a dictionary.</p>"},{"location":"api/models/userinfo/#vkpymusic.models.UserInfo.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a UserInfo object.</p>"},{"location":"api/vk_api/vk_api_exception/","title":"Vk api exception","text":""},{"location":"api/vk_api/vk_api_exception/#vkpymusic.vk_api.VkApiException","title":"<code>vkpymusic.vk_api.VkApiException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A class that represents an exception that occurs when interacting with the VK API.</p> <p>Attributes:</p> Name Type Description <code>error_code</code> <code>int</code> <p>The error code.</p> <code>error_msg</code> <code>str</code> <p>The error message.</p> <code>details</code> <code>dict</code> <p>Additional error details.</p>"},{"location":"api/vk_api/vk_api_exception/#vkpymusic.vk_api.VkApiException.__init__","title":"<code>__init__(error_code, error_msg, details)</code>","text":"<p>Initializes a VkApiException object.</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code>int</code> <p>The error code.</p> required <code>error_msg</code> <code>str</code> <p>The error message.</p> required <code>details</code> <code>dict</code> <p>Additional error details.</p> required"},{"location":"api/vk_api/vk_api_request/","title":"Vk api request","text":""},{"location":"api/vk_api/vk_api_request/#vkpymusic.vk_api.VkApiRequest","title":"<code>vkpymusic.vk_api.VkApiRequest</code>","text":"<p>A class that represents a request to VK API.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>The HTTP method.</p> <code>url</code> <code>str</code> <p>The URL.</p> <code>headers</code> <code>dict</code> <p>The headers.</p> <code>params</code> <code>dict</code> <p>The parameters.</p>"},{"location":"api/vk_api/vk_api_request/#vkpymusic.vk_api.VkApiRequest.__init__","title":"<code>__init__(method, url, headers=None, params=None)</code>","text":"<p>Initializes a VkApiRequest object.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method.</p> required <code>url</code> <code>str</code> <p>The URL.</p> required <code>headers</code> <code>dict</code> <p>The headers. (default None)</p> <code>None</code> <code>params</code> <code>dict</code> <p>The parameters. (default None)</p> <code>None</code>"},{"location":"api/vk_api/vk_api_request_builder/","title":"Vk api request builder","text":""},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder","title":"<code>vkpymusic.vk_api.VkApiRequestBuilder</code>","text":"<p>A class for building requests to VK API.</p>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_from_base_request","title":"<code>build_from_base_request(method, url, params)</code>  <code>staticmethod</code>","text":"<p>Builds a request from a base request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method.</p> required <code>url</code> <code>str</code> <p>The URL.</p> required <code>params</code> <code>dict</code> <p>The parameters.</p> required"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_profile_info","title":"<code>build_req_get_profile_info()</code>  <code>classmethod</code>","text":"<p>Builds a request to get profile information.</p>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_count","title":"<code>build_req_get_count(userid)</code>  <code>classmethod</code>","text":"<p>Builds a request to get the number of user's audio.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get","title":"<code>build_req_get(userid, count=100, offset=0, playlist_id=None, access_key=None)</code>  <code>classmethod</code>","text":"<p>Builds a request to get user's audio.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code> <code>playlist_id</code> <code>int</code> <p>The playlist ID. (default None)</p> <code>None</code> <code>access_key</code> <code>str</code> <p>The access key. (default None)</p> <code>None</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search","title":"<code>build_req_search(query, count=100, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for audio by query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query.</p> required <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_playlists","title":"<code>build_req_get_playlists(userid, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get user's playlists.</p> <p>Parameters:</p> Name Type Description Default <code>userid</code> <code>int</code> <p>The user ID.</p> required <code>count</code> <code>int</code> <p>The number of playlists. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search_playlists","title":"<code>build_req_search_playlists(text, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for playlists by text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text.</p> required <code>count</code> <code>int</code> <p>The number of playlists. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_search_albums","title":"<code>build_req_search_albums(text, count=50, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to search for albums by text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text.</p> required <code>count</code> <code>int</code> <p>The number of albums. (default 50)</p> <code>50</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_popular","title":"<code>build_req_get_popular(count=500, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get popular audio.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of audio recordings. (default 500)</p> <code>500</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_request_builder/#vkpymusic.vk_api.VkApiRequestBuilder.build_req_get_recommendations","title":"<code>build_req_get_recommendations(user_id=None, song_id=None, count=100, offset=0)</code>  <code>classmethod</code>","text":"<p>Builds a request to get audio recommendations.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The user ID for which recommendations are being received. (default None)</p> <code>None</code> <code>song_id</code> <code>int</code> <p>The song ID for which recommendations are being received. (default None)</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of audio recordings. (default 100)</p> <code>100</code> <code>offset</code> <code>int</code> <p>The offset. (default 0)</p> <code>0</code>"},{"location":"api/vk_api/vk_api_response/","title":"Vk api response","text":""},{"location":"api/vk_api/vk_api_response/#vkpymusic.vk_api.VkApiResponse","title":"<code>vkpymusic.vk_api.VkApiResponse</code>  <code>dataclass</code>","text":"<p>A class that represents a response from VK API.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Any</code> <p>The data.</p>"}]}