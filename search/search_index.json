{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#vkpymusic--vkpymusic","title":"VKpyMusic","text":"<p>A library for interacting with music in VK.</p> <p>Provides a convenient API for authorization,  receiving audio recordings, searching for music, as well as downloading individual songs and  playlists of the user in VK.</p> <p>Classes:</p> Name Description <code>Client</code> <p>A class that stores the user agent string, client ID, and client secret.</p> <code>TokenReceiver</code> <p>A class for receiving an access token.</p> <code>TokenReceiverAsync</code> <p>A class for receiving an access token asynchronously.</p> <code>Service</code> <p>A class for interacting with VK API.</p> <code>ServiceAsync</code> <p>A class for interacting with VK API asynchronously.</p> <p>Modules:</p> Name Description <code>models</code> <p>A module that contains all models for vkpymusic.</p> <code>utils</code> <p>A module that contains utilities for conversion and logging.</p>"},{"location":"installation/","title":"Installing vkpymusic","text":"<p>Welcome to the <code>vkpymusic</code> installation guide! Follow these steps to install and set up <code>vkpymusic</code> on your computer.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing <code>vkpymusic</code>, make sure you have Python 3.6 or later installed. You can check this by running the following command in your terminal:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#installation","title":"Installation","text":"<p>You can install <code>vkpymusic</code> using pip. Run the following command in your terminal:</p> <pre><code>pip install vkpymusic\n</code></pre> <p>Or you can install it from github:</p> <pre><code>git clone www.github.com/issamansur/vkpymusic\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>To make sure that <code>vkpymusic</code> was installed correctly, you can run the following command:</p> <pre><code>vkpymusic --version\n</code></pre> <p>If the installation was successful, this command should output the version of <code>vkpymusic</code>.</p>"},{"location":"installation/#suggestions-and-issues","title":"Suggestions and issues","text":"<p>If you encounter any issues with the installation of <code>vkpymusic</code>, please create a new issue in our GitHub repository.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2023 issamansur (EDEXADE)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"vkpymusic/","title":"Vkpymusic","text":""},{"location":"vkpymusic/#vkpymusic.Client","title":"<code>vkpymusic.Client(user_agent, client_id, client_secret)</code>","text":"<p>A class that stores the user agent string, client ID, and client secret.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>The user agent string.</p> <code>client_id</code> <code>str</code> <p>The client ID.</p> <code>client_secret</code> <code>str</code> <p>The client secret.</p> <p>Initializes a Client object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent string.</p> required <code>client_id</code> <code>str</code> <p>The client ID.</p> required <code>client_secret</code> <code>str</code> <p>The client secret.</p> required"},{"location":"api/client/","title":"Client","text":""},{"location":"api/client/#vkpymusic.Client","title":"<code>vkpymusic.Client</code>","text":"<p>A class that stores the user agent string, client ID, and client secret.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>The user agent string.</p> <code>client_id</code> <code>str</code> <p>The client ID.</p> <code>client_secret</code> <code>str</code> <p>The client secret.</p>"},{"location":"api/client/#vkpymusic.Client.__init__","title":"<code>__init__(user_agent, client_id, client_secret)</code>","text":"<p>Initializes a Client object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent string.</p> required <code>client_id</code> <code>str</code> <p>The client ID.</p> required <code>client_secret</code> <code>str</code> <p>The client secret.</p> required"},{"location":"api/models/","title":".models","text":""},{"location":"api/models/#vkpymusic.models","title":"<code>vkpymusic.models</code>","text":"<p>This module contains all models for vkpymusic.</p> <p>Classes:</p> Name Description <code>Song</code> <p>A class that represents a song.</p> <code>Playlist</code> <p>A class that represents a playlist.</p>"},{"location":"api/models/#vkpymusic.models.Song","title":"<code>vkpymusic.models.Song</code>","text":"<p>A class that represents a song.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the song.</p> <code>artist</code> <code>str</code> <p>The artist of the song.</p> <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> <code>track_id</code> <code>str</code> <p>The ID of the song.</p> <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> <code>url</code> <code>str</code> <p>The URL of the song.</p>"},{"location":"api/models/#vkpymusic.models.Song.__init__","title":"<code>__init__(title, artist, duration, track_id, owner_id, url='')</code>","text":"<p>Initializes a Song object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the song.</p> required <code>artist</code> <code>str</code> <p>The artist of the song.</p> required <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> required <code>track_id</code> <code>str</code> <p>The ID of the song.</p> required <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> required <code>url</code> <code>str</code> <p>The URL of the song.</p> <code>''</code>"},{"location":"api/models/#vkpymusic.models.Song.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the song to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The song as a dictionary.</p>"},{"location":"api/models/#vkpymusic.models.Song.to_safe","title":"<code>to_safe()</code>","text":"<p>Removes all non-alphanumeric characters from the song's title and artist.</p>"},{"location":"api/models/#vkpymusic.models.Song.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Creates a Song object from a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Song</code> <code>Song</code> <p>A Song object.</p>"},{"location":"api/models/#vkpymusic.models.Playlist","title":"<code>vkpymusic.models.Playlist</code>","text":"<p>A class that represents a playlist.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the playlist.</p> <code>description</code> <code>str</code> <p>The description of the playlist.</p> <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p>"},{"location":"api/models/#vkpymusic.models.Playlist.__init__","title":"<code>__init__(title, description, photo, count, owner_id, playlist_id, access_key)</code>","text":"<p>Initializes a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the playlist.</p> required <code>description</code> <code>str</code> <p>The description of the playlist.</p> required <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> required <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> required <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> required <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> required <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p> required"},{"location":"api/models/#vkpymusic.models.Playlist.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the playlist to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The playlist as a dictionary.</p>"},{"location":"api/models/#vkpymusic.models.Playlist.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Playlist</code> <code>Playlist</code> <p>The Playlist object.</p>"},{"location":"api/playlist/","title":"Playlist","text":""},{"location":"api/playlist/#vkpymusic.models.playlist","title":"<code>vkpymusic.models.playlist</code>","text":"<p>This module contains the Playlist class.</p>"},{"location":"api/playlist/#vkpymusic.models.playlist.Playlist","title":"<code>Playlist</code>","text":"<p>A class that represents a playlist.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the playlist.</p> <code>description</code> <code>str</code> <p>The description of the playlist.</p> <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p>"},{"location":"api/playlist/#vkpymusic.models.playlist.Playlist.__init__","title":"<code>__init__(title, description, photo, count, owner_id, playlist_id, access_key)</code>","text":"<p>Initializes a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the playlist.</p> required <code>description</code> <code>str</code> <p>The description of the playlist.</p> required <code>photo</code> <code>str</code> <p>The URL of the playlist's photo.</p> required <code>count</code> <code>int</code> <p>The number of tracks in the playlist.</p> required <code>owner_id</code> <code>int</code> <p>The ID of the playlist's owner.</p> required <code>playlist_id</code> <code>int</code> <p>The ID of the playlist.</p> required <code>access_key</code> <code>str</code> <p>The access key of the playlist.</p> required"},{"location":"api/playlist/#vkpymusic.models.playlist.Playlist.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the playlist to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The playlist as a dictionary.</p>"},{"location":"api/playlist/#vkpymusic.models.playlist.Playlist.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Converts a JSON object to a Playlist object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Playlist</code> <code>Playlist</code> <p>The Playlist object.</p>"},{"location":"api/service/","title":"Service","text":""},{"location":"api/service/#vkpymusic.Service","title":"<code>vkpymusic.Service</code>","text":"<p>A class for working with VK API.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>User agent string.</p> <code>__token</code> <code>str</code> <p>Token for VK API.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; service = Service.parse_config()\n&gt;&gt;&gt; songs = service.search_songs_by_text(\"Imagine Dragons\")\n&gt;&gt;&gt; for song in songs:\n...     Service.save_music(song)\n</code></pre>"},{"location":"api/service/#vkpymusic.Service-functions","title":"Functions","text":""},{"location":"api/service/#vkpymusic.Service.__init__","title":"<code>__init__(user_agent, token)</code>","text":"<p>Initializes a Service object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>User agent string.</p> required <code>token</code> <code>str</code> <p>Token for VK API.</p> required"},{"location":"api/service/#vkpymusic.Service.parse_config","title":"<code>parse_config(filename='config_vk.ini')</code>  <code>classmethod</code>","text":"<p>Create an instance of Service from config.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/service/#vkpymusic.Service.del_config","title":"<code>del_config(filename='config_vk.ini')</code>  <code>staticmethod</code>","text":"<p>Delete config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/service/#vkpymusic.Service.check_token","title":"<code>check_token(token)</code>  <code>staticmethod</code>","text":"<p>Check token for VK API.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token for VK API.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.is_token_valid","title":"<code>is_token_valid()</code>","text":"<p>Check token for VK API.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/service/#vkpymusic.Service.get_user_info","title":"<code>get_user_info()</code>","text":"<p>Get user info by token.</p> <p>Returns:</p> Type Description <code>(int, str)</code> <p>Tuple of user id and first + last name.</p>"},{"location":"api/service/#vkpymusic.Service.get_count_by_user_id","title":"<code>get_count_by_user_id(user_id)</code>","text":"<p>Get count of all user's songs.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_userid","title":"<code>get_songs_by_userid(user_id, count=100, offset=0)</code>","text":"<p>Search songs by owner/user id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist_id","title":"<code>get_songs_by_playlist_id(user_id, playlist_id, access_key, count=100, offset=0)</code>","text":"<p>Get songs by playlist id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/service/#vkpymusic.Service.get_songs_by_playlist","title":"<code>get_songs_by_playlist(playlist, count=10, offset=0)</code>","text":"<p>Get songs by instance of 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/service/#vkpymusic.Service.search_songs_by_text","title":"<code>search_songs_by_text(text, count=3, offset=0)</code>","text":"<p>Search songs by text/query.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/service/#vkpymusic.Service.get_playlists_by_userid","title":"<code>get_playlists_by_userid(user_id, count=5, offset=0)</code>","text":"<p>Get playlist by owner/user id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str or int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p>"},{"location":"api/service/#vkpymusic.Service.search_playlists_by_text","title":"<code>search_playlists_by_text(text, count=5, offset=0)</code>","text":"<p>Search playlists by text/query. Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p>"},{"location":"api/service/#vkpymusic.Service.search_albums_by_text","title":"<code>search_albums_by_text(text, count=5, offset=0)</code>","text":"<p>Search albums by text/query. Album - artists's album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p>"},{"location":"api/service/#vkpymusic.Service.save_music","title":"<code>save_music(song)</code>  <code>staticmethod</code>","text":"<p>Save song to '{workDirectory}/Music/{songname}.mp3'.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>relative path of downloaded music.</p>"},{"location":"api/serviceasync/","title":"ServiceAsync","text":""},{"location":"api/serviceasync/#vkpymusic.ServiceAsync","title":"<code>vkpymusic.ServiceAsync</code>","text":"<p>A class that provides methods for working with VK API.</p> <p>Attributes:</p> Name Type Description <code>user_agent</code> <code>str</code> <p>The user agent string.</p> <code>__token</code> <code>str</code> <p>The access token.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; service = ServiceAsync.parse_config()\n&gt;&gt;&gt; songs = await service.search_songs_by_text(\"Imagine Dragons\")\n&gt;&gt;&gt; song = songs[0]\n&gt;&gt;&gt; await Service.save_music(song)\n</code></pre>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync-functions","title":"Functions","text":""},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.__init__","title":"<code>__init__(user_agent, token)</code>","text":"<p>Initializes a Service object.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent string.</p> required <code>token</code> <code>str</code> <p>The access token.</p> required"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.parse_config","title":"<code>parse_config(filename='config_vk.ini')</code>  <code>classmethod</code>","text":"<p>Create an instance of Service from config.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.del_config","title":"<code>del_config(filename='config_vk.ini')</code>  <code>staticmethod</code>","text":"<p>Delete config created by 'TokenReceiver'.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Filename of config (default = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.check_token","title":"<code>check_token(token)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Check token for VK API.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.is_token_valid","title":"<code>is_token_valid()</code>  <code>async</code>","text":"<p>Check token for VK API.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if token is valid, False otherwise.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_user_info","title":"<code>get_user_info()</code>  <code>async</code>","text":"<p>Get user id and username.</p> <p>Returns:</p> Type Description <code>(int, str)</code> <p>tuple[int, str]: Tuple of user id and username.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_count_by_user_id","title":"<code>get_count_by_user_id(user_id)</code>  <code>async</code>","text":"<p>Get count of all user's songs.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count of all user's songs.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_songs_by_userid","title":"<code>get_songs_by_userid(user_id, count=100, offset=0)</code>  <code>async</code>","text":"<p>Search songs by owner/user id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_songs_by_playlist_id","title":"<code>get_songs_by_playlist_id(user_id, playlist_id, access_key, count=100, offset=0)</code>  <code>async</code>","text":"<p>Get songs by playlist id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>playlist_id</code> <code>int</code> <p>VK playlist id. (Take it from methods for playlist).</p> required <code>access_key</code> <code>str</code> <p>VK access key. (Take it from methods for playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>100</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_songs_by_playlist","title":"<code>get_songs_by_playlist(playlist, count=10, offset=0)</code>  <code>async</code>","text":"<p>Get songs by instance of 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>playlist</code> <code>Playlist</code> <p>Instance of 'Playlist' (take from methods for receiving Playlist).</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>10</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.search_songs_by_text","title":"<code>search_songs_by_text(text, count=3, offset=0)</code>  <code>async</code>","text":"<p>Search songs by text/query.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of song, author, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting songs (for VK API: default/max = 100).</p> <code>3</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Song]</code> <p>list[Song]: List of songs.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.get_playlists_by_userid","title":"<code>get_playlists_by_userid(user_id, count=5, offset=0)</code>  <code>async</code>","text":"<p>Get playlist by owner/user id.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str | int</code> <p>VK user id. (NOT USERNAME! vk.com/id*).</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.search_playlists_by_text","title":"<code>search_playlists_by_text(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search playlists by text/query. Playlist - it user's collection of songs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of playlist, genre, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of playlists.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.search_albums_by_text","title":"<code>search_albums_by_text(text, count=5, offset=0)</code>  <code>async</code>","text":"<p>Search albums by text/query. Album - artists's album/collection of songs. In obj context - same as 'Playlist'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of query. Can be title of album, name of artist, etc.</p> required <code>count</code> <code>int</code> <p>Count of resulting playlists (for VK API: default = 50, max = 100).</p> <code>5</code> <code>offset</code> <code>int</code> <p>Set offset for result. For example, count = 100, offset = 100 -&gt; 101-200.</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>list[Playlist]: List of albums.</p>"},{"location":"api/serviceasync/#vkpymusic.ServiceAsync.save_music","title":"<code>save_music(song, overwrite=False)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Save song to '{workDirectory}/Music/{songname}.mp3'.</p> <p>Parameters:</p> Name Type Description Default <code>song</code> <code>Song</code> <p>'Song' instance obtained from 'Service' methods.</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite file if it exists</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>relative path of downloaded music.</p>"},{"location":"api/song/","title":"Song","text":""},{"location":"api/song/#vkpymusic.models.song","title":"<code>vkpymusic.models.song</code>","text":"<p>This module contains the Song class.</p>"},{"location":"api/song/#vkpymusic.models.song-classes","title":"Classes","text":""},{"location":"api/song/#vkpymusic.models.song.Song","title":"<code>Song</code>","text":"<p>A class that represents a song.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the song.</p> <code>artist</code> <code>str</code> <p>The artist of the song.</p> <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> <code>track_id</code> <code>str</code> <p>The ID of the song.</p> <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> <code>url</code> <code>str</code> <p>The URL of the song.</p>"},{"location":"api/song/#vkpymusic.models.song.Song-functions","title":"Functions","text":""},{"location":"api/song/#vkpymusic.models.song.Song.__init__","title":"<code>__init__(title, artist, duration, track_id, owner_id, url='')</code>","text":"<p>Initializes a Song object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the song.</p> required <code>artist</code> <code>str</code> <p>The artist of the song.</p> required <code>duration</code> <code>int</code> <p>The duration of the song in seconds.</p> required <code>track_id</code> <code>str</code> <p>The ID of the song.</p> required <code>owner_id</code> <code>str</code> <p>The ID of the song's owner.</p> required <code>url</code> <code>str</code> <p>The URL of the song.</p> <code>''</code>"},{"location":"api/song/#vkpymusic.models.song.Song.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the song to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The song as a dictionary.</p>"},{"location":"api/song/#vkpymusic.models.song.Song.to_safe","title":"<code>to_safe()</code>","text":"<p>Removes all non-alphanumeric characters from the song's title and artist.</p>"},{"location":"api/song/#vkpymusic.models.song.Song.from_json","title":"<code>from_json(item)</code>  <code>classmethod</code>","text":"<p>Creates a Song object from a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>dict</code> <p>A JSON object.</p> required <p>Returns:</p> Name Type Description <code>Song</code> <code>Song</code> <p>A Song object.</p>"},{"location":"api/tokenreceiver/","title":"TokenReceiver","text":""},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver","title":"<code>vkpymusic.TokenReceiver</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. The TokenReceiver class provides methods for handling captcha, 2-factor authentication, and various error scenarios.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; receiver = TokenReceiver(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if receiver.auth():\n...    receiver.get_token()\n...    receiver.save_to_config()\n</code></pre>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver-functions","title":"Functions","text":""},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.__init__","title":"<code>__init__(login, password, client='Kate')</code>","text":"<p>Initialize TokenReceiver.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>Login to VK.</p> required <code>password</code> <code>str</code> <p>Password to VK.</p> required <code>client</code> <code>str</code> <p>Client to VK (default value = \"Kate\").</p> <code>'Kate'</code>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.auth","title":"<code>auth(on_captcha=on_captcha_handler, on_2fa=on_2fa_handler, on_invalid_client=on_invalid_client_handler, on_critical_error=on_critical_error_handler)</code>","text":"<p>Performs authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>Handler to captcha. Get url image. Return key.</p> <code>on_captcha_handler</code> <code>on_2fa</code> <code>Callable[[], str]</code> <p>Handler to 2 factor auth. Return captcha.</p> <code>on_2fa_handler</code> <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>Handler to invalid client.</p> <code>on_invalid_client_handler</code> <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>Handler to critical error. Get response.</p> <code>on_critical_error_handler</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was succesful).</p>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was succesful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/tokenreceiver/#vkpymusic.TokenReceiver.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"api/tokenreceiverasync/","title":"TokenReceiverAsync","text":""},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync","title":"<code>vkpymusic.TokenReceiverAsync</code>","text":"<p>A class that is responsible for performing authorization using the available login and password. It interacts with the VK API to obtain an access token. The TokenReceiver class provides methods for handling captcha, 2-factor authentication, and various error scenarios.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The client object.</p> <code>__login</code> <code>str</code> <p>The login.</p> <code>__password</code> <code>str</code> <p>The password.</p> <code>__token</code> <code>str</code> <p>The token.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; receiver = TokenReceiver(login=\"my_username\", password=\"my_password\")\n&gt;&gt;&gt; if await receiver.auth():\n...     receiver.get_token()\n...     receiver.save_to_config()\n</code></pre>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync-functions","title":"Functions","text":""},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.auth","title":"<code>auth(on_captcha, on_2fa, on_invalid_client, on_critical_error)</code>  <code>async</code>","text":"<p>Performs ASYNC authorization using the available login and password. If necessary, interactively accepts a code from SMS or captcha.</p> <p>Parameters:</p> Name Type Description Default <code>on_captcha</code> <code>Callable[[str], str]</code> <p>ASYNC handler to captcha. Get url image. Return key.</p> required <code>on_2fa</code> <code>Callable[[], str]</code> <p>ASYNC handler to 2 factor auth. Return captcha.</p> required <code>on_invalid_client</code> <code>Callable[[], None]</code> <p>ASYNC handler to invalid client.</p> required <code>on_critical_error</code> <code>Callable[[Any], None]</code> <p>ASYNC handler to crit error. Get response.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Boolean value indicating whether authorization was successful or not.</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.get_token","title":"<code>get_token()</code>","text":"<p>Prints token in console (if authorisation was succesful).</p>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.save_to_config","title":"<code>save_to_config(file_path='config_vk.ini')</code>","text":"<p>Save token and user agent data in config (if authorisation was succesful).</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename of config (default value = \"config_vk.ini\").</p> <code>'config_vk.ini'</code>"},{"location":"api/tokenreceiverasync/#vkpymusic.TokenReceiverAsync.create_path","title":"<code>create_path(file_path)</code>  <code>staticmethod</code>","text":"<p>Create path before and after this for different funcs.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Relative path to file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Absolute path to file.</p>"},{"location":"api/utils/","title":".utils","text":""},{"location":"api/utils/#vkpymusic.utils","title":"<code>vkpymusic.utils</code>","text":"<p>This module contains utilities for conversion and logging.</p> <p>Classes:</p> Name Description <code>Converter</code> <p>A class for performing various conversion operations.</p> <code>get_logger</code> <p>A function for getting or creating a logger.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter","title":"<code>vkpymusic.utils.Converter</code>","text":"<p>A class that converts a response from VK to a list of songs or playlists.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_songs","title":"<code>response_to_songs(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a list of songs.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The response object from VK.</p> required <p>Returns:</p> Type Description <code>List[Song]</code> <p>List[Song]: A list of songs converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.Converter.response_to_playlists","title":"<code>response_to_playlists(response)</code>  <code>staticmethod</code>","text":"<p>Converts a response to a list of playlists.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The response object from VK.</p> required <p>Returns:</p> Type Description <code>List[Playlist]</code> <p>List[Playlist]: A list of playlists converted from the response.</p>"},{"location":"api/utils/#vkpymusic.utils.get_logger","title":"<code>vkpymusic.utils.get_logger(name)</code>","text":"<p>Returns a logger instance with configured handlers.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <p>Returns:</p> Name Type Description <code>logger</code> <code>Logger</code> <p>A logger instance with configured handlers.</p>"}]}